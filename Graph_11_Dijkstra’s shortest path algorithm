

//User function Template for Java


class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static class Pair implements Comparable<Pair>
    {
        int node;
        int dist;
        public Pair(int n,int d)
        {
            this.node=n;
            this.dist=d;
        }
         @Override
        public int compareTo(Pair p2)
        {
            return this.dist-p2.dist;
        }
    }
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
     int[] dist=new int[V];
     boolean[] vis=new boolean[V];
     for(int i=0;i<V;i++)
     {
         if(i!=S)
         {
             dist[i]=Integer.MAX_VALUE;
         }
     }
     
    PriorityQueue<Pair> pq=new PriorityQueue<>();
    pq.add(new Pair(S,0));
    
    while(!pq.isEmpty())
    {
        Pair curr=pq.remove();
        if(!vis[curr.node])
        {
            vis[curr.node]=true;
            
        for(int i=0;i<adj.get(curr.node).size();i++)
        {
           ArrayList<Integer> dest=adj.get(curr.node).get(i);
           
             int v=dest.get(0);
             int wt=dest.get(1);

            if(dist[curr.node]+wt<dist[v])
            {
                dist[v]=dist[curr.node]+wt;
                pq.add(new Pair(v,dist[v]));
            }
        }
        }
    }
    return dist;
    
    }
}
