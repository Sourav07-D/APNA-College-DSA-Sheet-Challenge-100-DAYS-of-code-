

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycleUtil( ArrayList<ArrayList<Integer>> adj,boolean[] vis,int curr,int par)
    {
        vis[curr]=true;
        
        for(int i=0;i<adj.get(curr).size();i++)
        {
            int dest=adj.get(curr).get(i);
            if(vis[dest] && dest!=par)
            {
                return true;
            }else if(!vis[dest] && isCycleUtil(adj,vis,dest,curr))
            {
                return true;
            }
        }
        return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] vis=new boolean[V];
        boolean ans=false;
        for(int i=0;i<V;i++)
        {
            if(!vis[i])
            {
                if(isCycleUtil(adj,vis,i,-1))
                {
                    ans=isCycleUtil(adj,vis,i,-1);
                    break;
                }
            }
        }
        return ans;
    }
}
