class Solution
{  
    
        // code here
        
    //remove leading zeros..........................
    
    static Node removeLeadingZeros(Node a)
   {
       if (a != null && a.data == 0)
           return removeLeadingZeros(a.next);
       else
           return a;
   }
   
   
   //reverse linkedlist.............................
    static Node reverse(Node head){
        Node currNode=head;
        Node preNode=null;
        Node nextNode=null;
        
        while(currNode!=null){
            nextNode=currNode.next;
            currNode.next=preNode;
            preNode=currNode;
            currNode=nextNode;
        }
        // head=preNode;
        return preNode;
    }
    
    
    //size of linkedlist............................
    
    static int getSize(Node head)
    {
        int size = 0;
        while(head!=null)
        {
            size++;
            head = head.next;
        }
        return size;
    }
    
    
    
    
    static Node subLinkedList(Node l1, Node l2)
    {
        l1 = removeLeadingZeros(l1);
        l2 = removeLeadingZeros(l2);
        
        
        int s1 = getSize(l1);
        int s2 = getSize(l2);
        
        
        if(s1 < s2)
        {
            Node temp = l1;
            l1 = l2;
            l2 = temp;
        }
        else if(s1 == s2)
        {
            Node p1 = l1;
            Node p2 = l2;
            while(p1!=null && p1.data == p2.data)
            {
                p1 = p1.next;
                p2 = p2.next;
            }
            if(p1 != null && p1.data < p2.data)
            {
                    Node temp = l1;
                    l1 = l2;
                    l2 = temp;
            }
        }
        
        
    
        if(l2==null){
            return l1;
        }
        if(l1==null){
            return l2;
        }
        
        l1=reverse(l1);
        l2=reverse(l2);
        
        Node c1=l1;
        Node c2=l2;
        
        int borrow=0;
        

          //dummy Node  for creating new list of  difference of linked lists
        Node dummy=new Node(-1);  


        Node itr=dummy;
        
        while(c1!=null)
        {
            int diff= (borrow + c1.data) - ((c2!= null) ? c2.data : 0);
            
        
           if(diff<0){
               borrow=-1;
               diff =diff+10;
           }else{
            borrow=0;
           }
           
           itr.next= new Node(diff);  //pass diff in Node 
           itr =itr.next;
           
           c1=c1.next;
           if(c2!=null){
               c2=c2.next;
           }
        
        }


        //now reverse the new list
        dummy =reverse(dummy.next);  
        while(dummy.data == 0 && dummy.next!=null){
            dummy= dummy.next;
        }
        return dummy;
    }
}

