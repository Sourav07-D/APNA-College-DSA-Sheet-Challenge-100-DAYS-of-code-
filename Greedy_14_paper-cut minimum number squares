public class Main {
	// Function to find the minimum number of 
	// squares required to fill an n x m rectangle
	public static int minimumSquare(int n, int m) {
		// Create a 2D DP array to store the minimum squares required
		int[][] dp = new int[n + 1][m + 1];
		
		// Loop through rows and columns
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				if (i == j) {
					// If the rectangle is already a square, one square is needed
					dp[i][j] = 1;
				} else {
					// Initialize with maximum value
					dp[i][j] = Integer.MAX_VALUE;
					// Try all possible splits and find the minimum
					for (int k = 1; k < i; k++) {
						dp[i][j] = Math.min(dp[i][j], dp[i - k][j] + dp[k][j]);
					}
					for (int k = 1; k < j; k++) {
						dp[i][j] = Math.min(dp[i][j], dp[i][j - k] + dp[i][k]);
					}
				}
			}
		}
		return dp[n][m];
	}

	public static void main(String[] args) {
		int n = 13;
		int m = 29;
		System.out.println(minimumSquare(n, m)); // Output: 9
	}
}
