public void shortest_distance(int[][] matrix)
    {
        int row = matrix.length;
        int col = matrix[0].length;
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j] == -1 ){//put 0 when find -1
                    matrix[i][j] = 0;
                }
            }
        }
        
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j] == 0 && i!=j ){
                    matrix[i][j] = 999999;
                }
            }
        }
        
        for(int k=0;k<matrix.length;k++){
            for(int i=0;i<row;i++){
                for(int j=0;j<col;j++){
                    if(matrix[i][k] + matrix[k][j] <matrix[i][j]){
                        matrix[i][j] = matrix[i][k] + matrix[k][j];
                    }
                }
            }
        }
        
        /*
		 * if all diagonal coming 999999/infinite then we can say that there is no cycle.
		 * if diagonal coming finite value means there is cycle
		 * if except diagonal area any other position contain infinite/999999 means there in no path from i to j. 
		 */
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j] == 999999 && i==j ){
                    matrix[i][j] = 0;
                }
                if(matrix[i][j] == 999999 && i!=j ){
                    matrix[i][j] = -1;
                }
            }
        }
    }
