// Java Code for the above approach
import java.util.*;

/* A binary tree node has data,
a pointer to left child
and a pointer to right child */
class Node {
	int data;
	Node left, right;

	Node(int d)
	{
		data = d;
		left = right = null;
	}
}

// Function to return a new Node
public class Main {

	Node newNode(int data)
	{
		Node node = new Node(data);
		node.left = null;
		node.right = null;
		return (node);
	}

	// Function to convert bst to a doubly linked list
	void bstTodll(Node root, Node[] head)
	{

		// if root is NULL
		if (root == null)
			return;

		// Convert right subtree recursively
		bstTodll(root.right, head);

		// Update root
		root.right = head[0];

		// if head is not NULL
		if (head[0] != null) {

			// Update left of the head
			head[0].left = root;
		}

		// Update head
		head[0] = root;

		// Convert left subtree recursively
		bstTodll(root.left, head);
	}

	// Function to merge two sorted linked list
	Node mergeLinkedList(Node head1, Node head2)
	{

		/*Create head and tail for result list*/
		Node head = null, tail = null;
		while (head1 != null && head2 != null) {
			if (head1.data < head2.data) {
				if (head == null) {
					head = head1;
				}
				else {
					tail.right = head1;
					head1.left = tail;
				}
				tail = head1;
				head1 = head1.right;
			}
			else {
				if (head == null) {
					head = head2;
				}
				else {
					tail.right = head2;
					head2.left = tail;
				}
				tail = head2;
				head2 = head2.right;
			}
		}
		while (head1 != null) {
			tail.right = head1;
			head1.left = tail;
			tail = head1;
			head1 = head1.right;
		}
		while (head2 != null) {
			tail.right = head2;
			head2.left = tail;
			tail = head2;
			head2 = head2.right;
		}

		// Return the created DLL
		return head;
	}

	// function to convert list to bst
	Node sortedListToBST(Node[] head, int n)
	{

		// if no element is left or head is null
		if (n <= 0 || head[0] == null)
			return null;

		// Create left part from the list recursively
		Node left = sortedListToBST(head, n / 2);
		Node root = head[0];
		root.left = left;
		head[0] = head[0].right;

		// Create left part from the list recursively
		root.right = sortedListToBST(head, n - (n / 2) - 1);

		// Return the root of BST
		return root;
	}

	// This function merges two balanced BSTs
	Node mergeTrees(Node root1, Node root2, int m, int n)
	{

		// Convert BSTs into sorted Doubly Linked Lists

		Node[] head1 = new Node[1];
		head1[0] = null;
		bstTodll(root1, head1);
		head1[0].left = null;

		Node[] head2 = new Node[1];
		head2[0] = null;
		bstTodll(root2, head2);
		head2[0].left = null;

		// Merge the two sorted lists into one
		Node head = mergeLinkedList(head1[0], head2[0]);

		// Construct a tree from the merged lists
		return sortedListToBST(new Node[] { head }, m + n);
	}

	void printInorder(Node node)
	{

		// if current node is NULL
		if (node == null) {
			return;
		}
		printInorder(node.left);

		// Print node of current data
		System.out.print(node.data + " ");

		printInorder(node.right);
	}

	/* Driver code*/
	public static void main(String[] args)
	{
		Main obj = new Main();

		/* Create following tree as first balanced BST
		100
		/ \
		50 300
		/ \
		20 70 */

		Node root1 = obj.newNode(100);
		root1.left = obj.newNode(50);
		root1.right = obj.newNode(300);
		root1.left.left = obj.newNode(20);
		root1.left.right = obj.newNode(70);

		/* Create following tree as second balanced BST
				80
			/ \
			40 120
	*/

		Node root2 = obj.newNode(80);
		root2.left = obj.newNode(40);
		root2.right = obj.newNode(120);

		// Function Call
		Node mergedTree
			= obj.mergeTrees(root1, root2, 5, 3);

		System.out.println(
			"Following is Inorder traversal of the merged tree:");
		obj.printInorder(mergedTree);
	}
}
