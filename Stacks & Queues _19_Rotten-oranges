
class Pair{
    int row;
    int col;
    int tm;
    public Pair(int row, int col, int tm){
        this.row = row;
        this.col = col;
        this.tm = tm;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {

        // n is the width of matrix and m is the height of the matrix
        int n = grid.length;
        int m = grid[0].length;

        // vis array for keep track of visited nodes or oranges
        int vis[][] = new int[n][m];

        // Queue for maintaining the order of traversal
        Queue<Pair> q = new LinkedList<>();
       
        // one variable for counting fresh oranges
        int cntFresh = 0;
       
        // these two for loops for adding the initially rotten oranges
        //  to the queue and mark it visited
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 2){
                    q.add(new Pair(i,j,0));
                    vis[i][j] = 2;
                }else{
                    vis[i][j] = 0;
                }
                // if it is fresh orange increment the cntFresh
                if(grid[i][j] == 1){
                    cntFresh++;
                }
            }
        }
        int tm = 0;
        int count = 0;

        // these numbers in the arrays are not taken randomlly
        // these numbers are such numerss that if we add the corresponding elements
        // of both the arrays with the curent element's row and column index
        // we get the neighbor element of curent element
        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};
        while(!q.isEmpty()){
            int row = q.peek().row;
            int col = q.peek().col;
            int time = q.peek().tm;
            tm = Math.max(tm, time);

            // remove the first element of Queue and check its neighbours
            // are visited or not and is fresh?
            q.remove();
            for(int i=0; i<4; i++){
                int nrow = row + delRow[i];
                int ncol = col + delCol[i];
                if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m
                && vis[nrow][ncol] == 0 && grid[nrow][ncol] == 1){
                    q.add(new Pair(nrow,ncol,tm+1));
                    vis[nrow][ncol] = 2;
                    count++;
                }
            }
        }
        if(cntFresh != count) return -1;
        return tm;
    }
}
